/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hridaya;


import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vigne
 */
public class DocAppointment extends javax.swing.JFrame {
    String username,date,time;

    /**
     * Creates new form DocAppointment
     */
    public DocAppointment() {
        initComponents();
    }
     public DocAppointment(String username,String date,String time) {
         this.username=username;
         this.time=time;
         this.date=date;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        lbl_back = new javax.swing.JLabel();
        lbl_home = new javax.swing.JLabel();
        lbl_logout = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        appointments = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        op_appointment = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        room_appointments = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        patient = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        cancelled = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        diag = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        contact_info = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        consulting_time = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        nurse_info = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        allappointments = new javax.swing.JTable();
        makeapp = new javax.swing.JButton();
        patientid = new javax.swing.JTextField();
        docid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchpatient = new javax.swing.JButton();
        searchdoc = new javax.swing.JButton();
        makeappp = new javax.swing.JButton();
        diagnose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 153, 51));

        jLabel10.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("DOCTORS DESK");

        jLabel21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel21MouseClicked(evt);
            }
        });

        lbl_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/back arrow.png"))); // NOI18N
        lbl_back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_backMouseClicked(evt);
            }
        });

        lbl_home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/home_1.png"))); // NOI18N
        lbl_home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_homeMouseClicked(evt);
            }
        });

        lbl_logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/power off.png"))); // NOI18N
        lbl_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_logoutMouseClicked(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-refresh-52.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(482, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148)
                .addComponent(jLabel21)
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(lbl_home)
                .addGap(52, 52, 52)
                .addComponent(lbl_logout)
                .addGap(22, 22, 22))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(56, 56, 56)
                    .addComponent(lbl_back)
                    .addContainerGap(1151, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_home)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(lbl_back)
                    .addContainerGap(17, Short.MAX_VALUE)))
        );

        appointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Patient ID", "Doc ID", "Front Desk ID", "Date", "Time", "Is Admit", "Is operate", "Diagnosis ID", "Consultation Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(appointments);

        jTabbedPane1.addTab("Appointments", jScrollPane2);

        op_appointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Operation ID", "Operation Theatre", "Type", "Result", "Number of Hours", "Charge"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(op_appointment);

        jTabbedPane1.addTab("Operation appointment", jScrollPane3);

        room_appointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Room ID", "Food", "Date of Admission", "Date of Discharge", "Number of days", "Charge"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(room_appointments);

        jTabbedPane1.addTab("Room appointments", jScrollPane1);

        patient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Name", "Age", "Sex", "Weight", "Height", "Occupation", "Blood Group", "Insurance ID", "DOB", "InPatient?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(patient);

        jTabbedPane1.addTab("Patients", jScrollPane4);

        cancelled.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Patient ID", "Doc ID", "F-ID", "Date", "Time", "IS Admit", "Is Operate", "Diagnosis ID", "Consulting Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(cancelled);

        jTabbedPane1.addTab("Cancelled", jScrollPane9);

        diag.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Diagnosis ID", "Patient Condition", "History", "Care"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(diag);

        jTabbedPane1.addTab("Diagnosis ", jScrollPane5);

        contact_info.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "", "ID", "Phone Number", "Email", "House Number", "Street", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(contact_info);

        jTabbedPane1.addTab("Contact Info", jScrollPane6);

        consulting_time.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Days of the week", "Time", "Number of hours"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(consulting_time);

        jTabbedPane1.addTab("Consulting Time", jScrollPane7);

        nurse_info.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nurse ID", "Name", "Age", "Sex", "Blood Group", "Working Hours", "Seniority"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(nurse_info);

        jTabbedPane1.addTab("Nurses", jScrollPane8);

        allappointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Patient ID", "Doc ID", "Front Desk ID", "Date", "Time", "IS Admit", "Is Operate", "Diagnosis ID", "Consulting Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(allappointments);

        jTabbedPane1.addTab("All Appointments", jScrollPane10);

        makeapp.setText("Cancel Appointment");
        makeapp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeappActionPerformed(evt);
            }
        });

        jLabel2.setText("Search Diagnosis ID");

        jLabel3.setText("Search Patient");

        searchpatient.setText("Search Patient");
        searchpatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchpatientActionPerformed(evt);
            }
        });

        searchdoc.setText("Search Diagnosis ID");
        searchdoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchdocActionPerformed(evt);
            }
        });

        makeappp.setText("Set Appointment");
        makeappp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeapppActionPerformed(evt);
            }
        });

        diagnose.setText("Diagnose Patient");
        diagnose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diagnoseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 18, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 912, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(patientid, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchpatient, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(docid, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchdoc, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(makeapp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(makeappp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(diagnose, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(docid, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patientid, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchpatient, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchdoc, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(makeapp, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(makeappp, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(diagnose, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel21MouseClicked

    }//GEN-LAST:event_jLabel21MouseClicked

    private void lbl_backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_backMouseClicked
        new DoctorMain(username,date,time).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lbl_backMouseClicked

    private void lbl_homeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_homeMouseClicked
        new DoctorMain(username,date,time).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lbl_homeMouseClicked

    private void lbl_logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_logoutMouseClicked
        String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
        Connection con = null;

        try {
            Class.forName("com.mysql.jdbc.Driver");
            con=DriverManager.getConnection(connectString,"root","");
            Statement st=con.createStatement();
            String qr="update login SET logged = '0' WHERE username = '"+username+"'";
            st.executeUpdate(qr);
            SimpleDateFormat dateformat1 = new SimpleDateFormat("HH:mm:ss");
            String timeout=dateformat1.format(Calendar.getInstance().getTime());
            String qt="update log_times SET logout_time = '"+timeout+"' WHERE id = '"+username+ "' AND date_login = '"+date+"' and login_time = '"+time+"'";
            st.executeUpdate(qt);
            con.close();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            new Login().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_lbl_logoutMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        int index= jTabbedPane1.getSelectedIndex();

        if(index==0)
        {
            int row;
            int rows = appointments.getRowCount();
            int i;
            //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
            Connection con = null;

            try {
                Class.forName("com.mysql.jdbc.Driver");
                con=DriverManager.getConnection(connectString,"root","");
                Statement st=con.createStatement();
                for(row=0;row<rows;row++)
                {
                    String query="UPDATE APPOINTMENTS SET APPOINTMENT_ID='"+appointments.getValueAt(row,0).toString()+"' ,PATIENT_ID='"+appointments.getValueAt(row,1).toString()+"', DOC_ID='"+appointments.getValueAt(row,2).toString()+"',F_ID='"+appointments.getValueAt(row,3).toString()+"', DATE='"+appointments.getValueAt(row,4).toString()+"', TIME='"+appointments.getValueAt(row,5).toString()+"', IS_ADMIT='"+appointments.getValueAt(row,6).toString()+"', IS_OPERATE='"+appointments.getValueAt(row,7).toString()+"', DIAGNOSIS_ID='"+appointments.getValueAt(row,8).toString()+"', CONSULTING_PRICE='"+appointments.getValueAt(row,9).toString()+"' WHERE APPOINTMENT_ID='"+appointments.getValueAt(row,0).toString()+"'" ;

                    st.executeUpdate(query);
                }
                con.close();
                JOptionPane.showMessageDialog(null, "Successfully Updated ID's Appointments" , "Update", 2);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        else if(index==1)
        {
            int row;
            int rows = op_appointment.getRowCount();
            int i;
            //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
            Connection con = null;

            try {
                Class.forName("com.mysql.jdbc.Driver");
                con=DriverManager.getConnection(connectString,"root","");
                for(row=0;row<rows;row++)
                {
                    String query="UPDATE APPOINTMENT_OPERATION SET APPOINTMENT_ID='"+op_appointment.getValueAt(row,0).toString()+"' ,OPERATION_ID='"+op_appointment.getValueAt(row,1).toString()+"', OP_ID='"+op_appointment.getValueAt(row,2).toString()+"',TYPE='"+op_appointment.getValueAt(row,3).toString()+"', RESULT='"+op_appointment.getValueAt(row,4).toString()+"', NUMBER_OF_HOURS='"+op_appointment.getValueAt(row,5).toString()+"', CHARGE='"+op_appointment.getValueAt(row,6).toString()+"' WHERE APPOINTMENT_ID='"+ op_appointment.getValueAt(row,0).toString()+"'" ;
                    Statement st=con.createStatement();
                    st.executeUpdate(query);
                }
                con.close();
                JOptionPane.showMessageDialog(null, "Successfully Updated ID's Operation Appointments" , "Update", 2);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        else if(index==2)
        {
            int row;
            int rows = room_appointments.getRowCount();
            int i;

            //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
            Connection con = null;

            try {
                Class.forName("com.mysql.jdbc.Driver");
                con=DriverManager.getConnection(connectString,"root","");
                for(row=0;row<rows;row++)
                {
                    String query="UPDATE APPOINTMENT_ROOM SET APPOINTMENT_ID='"+room_appointments.getValueAt(row,0).toString()+"' ,ROOM_ID='"+room_appointments.getValueAt(row,1).toString()+"', FOOD='"+room_appointments.getValueAt(row,2).toString()+"',DATE_OF_ADMISSION='"+room_appointments.getValueAt(row,3).toString()+"',DATE_OF_DISCHARGE='"+room_appointments.getValueAt(row,4).toString()+"', NUMBER_OF_DAYS='"+room_appointments.getValueAt(row,5).toString()+"', CHARGE='"+room_appointments.getValueAt(row,6).toString()+"' WHERE APPOINTMENT_ID='"+  room_appointments.getValueAt(row,0).toString()+"'" ;
                    Statement st=con.createStatement();
                    st.executeUpdate(query);
                }
                con.close();
                JOptionPane.showMessageDialog(null, "Successfully Updated ID's Room Appointments" , "Update", 2);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        else if(index==3)
        {
            int row;
            int  rows = patient.getRowCount();

            //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
            Connection con = null;

            try {
                Class.forName("com.mysql.jdbc.Driver");
                con=DriverManager.getConnection(connectString,"root","");
                for(row=0;row<rows;row++)
                {

                    String query="UPDATE PATIENT_INFO SET P_ID='"+patient.getValueAt(row,0).toString()+"' ,NAME='"+patient.getValueAt(row,1).toString()+"', AGE='"+patient.getValueAt(row,2).toString()+"',SEX='"+patient.getValueAt(row,3).toString()+"',WEIGHT='"+patient.getValueAt(row,4).toString()+"',HEIGHT='"+patient.getValueAt(row,5).toString()+"', OCCUPATION='"+patient.getValueAt(row,6).toString()+"',BLOOD_GROUP='"+patient.getValueAt(row,7).toString()+"',INSURANCE_ID='"+patient.getValueAt(row,8).toString()+"',DOB='"+patient.getValueAt(row,9).toString()+"', IS_INPATIENT='"+patient.getValueAt(row,10).toString()+"' WHERE P_ID='"+  patient.getValueAt(row,0).toString()+"'" ;
                    Statement st=con.createStatement();
                    st.executeUpdate(query);
                }

                con.close();
                JOptionPane.showMessageDialog(null, "Successfully Updated ID's Patient" , "Update", 2);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
      /*  else if(index==4)
        {
            int row;
            int rows =cancelled.getRowCount();
            int i;
            //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
            Connection con = null;

            try {
                Class.forName("com.mysql.jdbc.Driver");
                con=DriverManager.getConnection(connectString,"root","");
                Statement st=con.createStatement();
                for(row=0;row<rows;row++)
                {
                    String query="UPDATE APPOINTMENTS SET APPOINTMENT_ID='"+appointments.getValueAt(row,0).toString()+"' ,PATIENT_ID='"+appointments.getValueAt(row,1).toString()+"', DOC_ID='"+appointments.getValueAt(row,2).toString()+"',F_ID='"+appointments.getValueAt(row,3).toString()+"', DATE='"+appointments.getValueAt(row,4).toString()+"', TIME='"+appointments.getValueAt(row,5).toString()+"', IS_ADMIT='"+appointments.getValueAt(row,6).toString()+"', IS_OPERATE='"+appointments.getValueAt(row,7).toString()+"', DIAGNOSIS_ID='"+appointments.getValueAt(row,8).toString()+"', CONSULTING_PRICE='"+appointments.getValueAt(row,9).toString()+"',PAID='"+appointments.getValueAt(row,10).toString()+"',CANCELLED='"+appointments.getValueAt(row,11).toString()+"'  WHERE APPOINTMENT_ID='"+appointments.getValueAt(row,0).toString()+"'" ;

                    st.executeUpdate(query);
                }
                con.close();
                JOptionPane.showMessageDialog(null, "Successfully Updated ID's Appointments" , "Update", 2);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }*/

        else
        {
            JOptionPane.showMessageDialog(null, "Error" , "Update failed", 2);
        }
        updateTables();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void makeappActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeappActionPerformed
        int index=jTabbedPane1.getSelectedIndex();
        if(index==0)
        {
            int row=appointments.getSelectedRow();
            String id=appointments.getValueAt(row,0).toString();
            
        
       
        String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
        Connection con = null;

        try {
            Class.forName("com.mysql.jdbc.Driver");
            con=DriverManager.getConnection(connectString,"root","");
            Statement st=con.createStatement();
            String query="UPDATE APPOINTMENTS SET CANCELLED = '1' WHERE APPOINTMENT_ID='"+id+"'";
           st.executeUpdate(query);
         
          
   
         
              JOptionPane.showMessageDialog(null, "Successfully Updated ID's Appointments" , "Update", 2);

            con.close();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateTables();
        }
    }//GEN-LAST:event_makeappActionPerformed

    private void searchpatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchpatientActionPerformed
        String searchStr=patientid.getText();
        jTabbedPane1.setSelectedIndex(3);
        for (int row = 0; row <= patient.getRowCount() - 1; row++) {

            for (int col = 0; col <= patient.getColumnCount() - 1; col++) {

                if (searchStr.equals(patient.getValueAt(row, col))) {

                    // this will automatically set the view of the scroll in the location of the value
                    patient.scrollRectToVisible(patient.getCellRect(row, 0, true));
                    patientid.setText(patient.getValueAt(row, 0).toString());

                    // this will automatically set the focus of the searched/selected row/value
                    patient.setRowSelectionInterval(row, row);

                    for (int i = 0; i <= patient.getColumnCount() - 1; i++) {

                        patient.getColumnModel().getColumn(i).setCellRenderer(new HighlightRenderer());
                    }
                }
            }
        }
    }//GEN-LAST:event_searchpatientActionPerformed
   public void updateTables()
{
     DefaultTableModel model = (DefaultTableModel)
        appointments.getModel();
        //ta = "Seller";
        int rows = model.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model.removeRow(0);
            }
        }
         DefaultTableModel model1 = (DefaultTableModel)
        op_appointment.getModel();
        //ta = "Seller";
        rows = model1.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model1.removeRow(0);
            }
        }
         DefaultTableModel model2= (DefaultTableModel)
        room_appointments.getModel();
        //ta = "Seller";
        rows = model2.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model2.removeRow(0);
            }
        }
         DefaultTableModel model3 = (DefaultTableModel)
        patient.getModel();
        //ta = "Seller";
        rows = model3.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model3.removeRow(0);
            }
        }
         DefaultTableModel model4 = (DefaultTableModel)
        diag.getModel();
        //ta = "Seller";
        rows = model4.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model4.removeRow(0);
            }
        }
          DefaultTableModel model5 = (DefaultTableModel)
        contact_info.getModel();
        //ta = "Seller";
        rows = model5.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model5.removeRow(0);
            }
        }
         DefaultTableModel model6 = (DefaultTableModel)
        consulting_time.getModel();
        //ta = "Seller";
        rows = model6.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model6.removeRow(0);
            }
        }
         DefaultTableModel model7= (DefaultTableModel)
        nurse_info.getModel();
        //ta = "Seller";
        rows = model7.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model7.removeRow(0);
            }
        }
           DefaultTableModel model8= (DefaultTableModel)
        cancelled.getModel();
        //ta = "Seller";
        rows = model8.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model8.removeRow(0);
            }
        }
              DefaultTableModel model9 = (DefaultTableModel)
        allappointments.getModel();
        //ta = "Seller";
        rows = model9.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model9.removeRow(0);
            }
        }
       
      
        String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
        Connection con = null;
       
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con=DriverManager.getConnection(connectString,"root","");
             Statement st=con.createStatement();
              String qr="SELECT * FROM DIAGNOSIS ";
               ResultSet rs = st.executeQuery( qr );
                while(rs.next())
                {
                    String a = rs.getString("appointment_id");
                    String b = rs.getString("diagnosis_id");
                   // String c = rs.getString("age");
                    String d=rs.getString("patient_condition");
                    String e = rs.getString("history");
                    //String f = rs.getString("state_medical_council");
                    //String g = rs.getString("qualification_year");
                   String h=rs.getString("care");
                   // String i = rs.getString("years_of_experience");
                   // String j = rs.getString("blood_group");
                  //  String k = rs.getString("consulting_price");
                   // String l=rs.getString("insurance_id");
                   // String m=rs.getString("employed");
                    model4.addRow(new Object[]{ a, b, d, e, h});
                }
                  String q9="SELECT * FROM NURSE_INFO WHERE EMPLOYED = '1'";
                rs=st.executeQuery(q9);
                while(rs.next())
                {
                    String a = rs.getString("nurse_id");
                    String b = rs.getString("name");
                    String c = rs.getString("age");
                    String d=rs.getString("sex");
                    String e = rs.getString("blood_group");
                    String f = rs.getString("working_hours");
                    //String g = rs.getString("experience");
                    //String h=rs.getString("insurance_id");
                    String i = rs.getString("seniority");
                    //String j=rs.getString("employed");
                    model7.addRow(new Object[]{ a, b, c, d, e, f, i});
                }
                    String q8="SELECT * FROM CONSULTING_TIME";
                rs=st.executeQuery(q8);
                while(rs.next())
                {
                    String a = rs.getString("doc_id");
                    int dow=rs.getInt("days_of_week");
                    String b="";
                    while(dow>0)
                    {
                        int k=dow%10;
                        if(k==1)
                        {
                            b=b+" Monday";
                        }
                        else if(k==2)
                        {
                            b=b+" Tuesday";
                        }
                        else if(k==3)
                        {
                            b=b+" Wednesday";
                        }
                        else if(k==4)
                        {
                            b=b+" Thursday";
                        }
                        else if(k==5)
                        {
                            b=b+" Friday";
                        }
                        else if(k==6)
                        {
                            b=b+" Saturday";
                        }
                        else
                        {
                            b=b+" Sunday";
                        }
                        dow=dow/10;
                    }
                    
                    String c = rs.getString("time");
                    String d=rs.getString("no_of_hours");
                   
                    model6.addRow(new Object[]{ a, b, c, d});
                }
                String q5="SELECT * FROM CONTACT_INFO";
                rs=st.executeQuery(q5);
                while(rs.next())
                {
                    String a = rs.getString("id");
                    String b = rs.getString("ph_no1");
                    String c = rs.getString("email");
                    String d=rs.getString("house_no");
                    String e = rs.getString("street_name");
                    String f = rs.getString("city");
                    model5.addRow(new Object[]{ a, b, c, d, e, f});
                }
                String q1="SELECT * FROM PATIENT_INFO";
                rs=st.executeQuery(q1);
                while(rs.next())
                {
                    String a = rs.getString("p_id");
                    String b = rs.getString("name");
                    String c = rs.getString("age");
                    String d=rs.getString("sex");
                    String e = rs.getString("weight");
                    String f = rs.getString("height");
                    String g = rs.getString("occupation");
                    String h=rs.getString("blood_group");
                    String i = rs.getString("insurance_id");
                    String j=rs.getString("dob");
                    String k=rs.getString("is_inpatient");
                    model3.addRow(new Object[]{ a, b, c, d, e, f, g, h, i, j,k});
                }
                String q2="SELECT * FROM APPOINTMENT_ROOM";
                rs=st.executeQuery(q2);
                while(rs.next())
                {
                    String a = rs.getString("appointment_id");
                    String b = rs.getString("room_id");
                    String c = rs.getString("food");
                    String d=rs.getString("date_of_admission");
                    String e = rs.getString("date_of_discharge");
                    String f = rs.getString("number_of_days");
                    String g = rs.getString("charge");
                  //  String h=rs.getString("employed");
                    model2.addRow(new Object[]{ a, b, c, d, e, f, g});
                }
                String q3="SELECT * FROM APPOINTMENT_OPERATION";
                rs=st.executeQuery(q3);
                while(rs.next())
                {
                    String a = rs.getString("appointment_id");
                    String b = rs.getString("operation_id");
                    String c = rs.getString("op_id");
                    String d=rs.getString("type");
                    String e = rs.getString("result");
                    String f = rs.getString("number_of_hours");
                    String g = rs.getString("charge");
                    model1.addRow(new Object[]{ a, b, c, d, e, f, g});
                }
                String q4="SELECT * FROM APPOINTMENTS WHERE CANCELLED = '0' AND DOC_ID='"+username+"'";
                rs=st.executeQuery(q4);
                while(rs.next())
                {
                     String a = rs.getString("appointment_id");
                    String b = rs.getString("patient_id");
                    String c = rs.getString("doc_id");
                    String d=rs.getString("f_id");
                    String e = rs.getString("date");
                    SimpleDateFormat  sdfo = new SimpleDateFormat("yyyy-MM-dd"); 
                    Date d1=sdfo.parse(e);
                    Date d2=new Date();
                    if(d1.before((d2)))
                            {
                                continue;
                            }
                    String f = rs.getString("time");
                    String g = rs.getString("is_admit");
                    String h = rs.getString("is_operate");
                    String i = rs.getString("diagnosis_id");
                    String j = rs.getString("consulting_price");
                    String k=rs.getString("paid");
                    String l=rs.getString("cancelled");
                    model.addRow(new Object[]{ a, b, c, d, e, f, g,h,i,j,k,i});
                }
                     String q12="SELECT * FROM APPOINTMENTS WHERE DOC_ID='"+username+"'";
                rs=st.executeQuery(q12);
                while(rs.next())
                {
                     String a = rs.getString("appointment_id");
                    String b = rs.getString("patient_id");
                    String c = rs.getString("doc_id");
                    String d=rs.getString("f_id");
                    String e = rs.getString("date");
                    String f = rs.getString("time");
                    String g = rs.getString("is_admit");
                    String h = rs.getString("is_operate");
                    String i = rs.getString("diagnosis_id");
                    String j = rs.getString("consulting_price");
                    String k=rs.getString("paid");
                    String l=rs.getString("cancelled");
                    model9.addRow(new Object[]{ a, b, c, d, e, f, g,h,i,j,k,i});
                }
                 String q="SELECT * FROM APPOINTMENTS WHERE CANCELLED = '1' AND DOC_ID='"+username+"'";
                rs=st.executeQuery(q);
                while(rs.next())
                {
                     String a = rs.getString("appointment_id");
                    String b = rs.getString("patient_id");
                    String c = rs.getString("doc_id");
                    String d=rs.getString("f_id");
                    String e = rs.getString("date");
                    String f = rs.getString("time");
                    String g = rs.getString("is_admit");
                    String h = rs.getString("is_operate");
                    String i = rs.getString("diagnosis_id");
                    String j = rs.getString("consulting_price");
                    String k=rs.getString("paid");
                    String l=rs.getString("cancelled");
                    model8.addRow(new Object[]{ a, b, c, d, e, f, g,h,i,j,k,i});
                }
              
                con.close();   
        }
        catch(Exception e)
        {
            System.out.println( e );
        }
      
}
    public class HighlightRenderer extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

        // everything as usual
        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        // added behavior
        if(row == table.getSelectedRow()) {

            // this will customize that kind of border that will be use to highlight a row
            setBorder(BorderFactory.createMatteBorder(2, 1, 2, 1, Color.BLACK));
        }

        return this;
    }
}
    private void searchdocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchdocActionPerformed
        String searchStr=docid.getText();
        jTabbedPane1.setSelectedIndex(5);
        for (int row = 0; row <= diag.getRowCount() - 1; row++) {

            for (int col = 0; col <= diag.getColumnCount() - 1; col++) {

                if (searchStr.equals(diag.getValueAt(row, col))) {

                    // this will automatically set the view of the scroll in the location of the value
                    diag.scrollRectToVisible(diag.getCellRect(row, 0, true));
                    docid.setText(diag.getValueAt(row, 0).toString());

                    // this will automatically set the focus of the searched/selected row/value
                    diag.setRowSelectionInterval(row, row);

                    for (int i = 0; i <= diag.getColumnCount() - 1; i++) {

                        diag.getColumnModel().getColumn(i).setCellRenderer(new HighlightRenderer());
                    }
                }
            }
        }
    }//GEN-LAST:event_searchdocActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       updateTables();
    }//GEN-LAST:event_formWindowOpened

    private void makeapppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeapppActionPerformed
         int index=jTabbedPane1.getSelectedIndex();
        if(index==4)
        {
            int rows=cancelled.getSelectedRow();
            String id=cancelled.getValueAt(rows,0).toString();
            String doc=cancelled.getValueAt(rows,2).toString();
            String datea=cancelled.getValueAt(rows,4).toString();
            String timea=cancelled.getValueAt(rows,5).toString();
            int flag=0;
             jTabbedPane1.setSelectedIndex(0);
        for (int row = 0; row <= appointments.getRowCount() - 1; row++) {
          //  System.out.println((datea.equals(row+" "+appointments.getValueAt(row, 4))));
            // System.out.println((timea.equals(appointments.getValueAt(row, 5))));
            //  System.out.println((doc.equals(appointments.getValueAt(row, 2))));
                

                    if ( (datea.equals(appointments.getValueAt(row, 4)))&& (timea.equals(appointments.getValueAt(row,5))) && (doc.equals(appointments.getValueAt(row,2))) ) 
                    {
                        

                        // this will automatically set the view of the scroll in the location of the value
                        appointments.scrollRectToVisible(appointments.getCellRect(row, 0, true));
                        jTabbedPane1.setSelectedIndex(0);
                        

                        // this will automatically set the focus of the searched/selected row/value
                        appointments.setRowSelectionInterval(row, row);
                        flag=1;
                        System.out.println(flag);
                      //  JOptionPane.showMessageDialog(null, "Time is unavailable" , "Update", 2);
                        

                        for (int i = 0; i <= appointments.getColumnCount() - 1; i++) {

                            appointments.getColumnModel().getColumn(i).setCellRenderer(new HighlightRenderer());
                            
                        }
                    
                }  
            }
            if(flag==0)
            {
        
       
        String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
        Connection con = null;

        try {
            Class.forName("com.mysql.jdbc.Driver");
            con=DriverManager.getConnection(connectString,"root","");
            Statement st=con.createStatement();
            String query="UPDATE APPOINTMENTS SET CANCELLED = '0' WHERE APPOINTMENT_ID='"+id+"'";
           st.executeUpdate(query);
         
          
   
         
              JOptionPane.showMessageDialog(null, "Successfully Updated ID's Appointments" , "Update", 2);

            con.close();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateTables();
        }
            else
            {
                  JOptionPane.showMessageDialog(null, "Timeslot unavailable" , "Update", 2);
            }
        }
    }//GEN-LAST:event_makeapppActionPerformed

    private void diagnoseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diagnoseActionPerformed
     int index= jTabbedPane1.getSelectedIndex();
     if(index==0)
     {
         int row=appointments.getSelectedRow();
         if(row>=0)
         {
            new Diagnose(username,date,time,appointments.getValueAt(row,0).toString(),appointments.getValueAt(row,1).toString(),appointments.getValueAt(row,8).toString()).setVisible(true);
            this.dispose();
         }
     }
    }//GEN-LAST:event_diagnoseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DocAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DocAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DocAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DocAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DocAppointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allappointments;
    private javax.swing.JTable appointments;
    private javax.swing.JTable cancelled;
    private javax.swing.JTable consulting_time;
    private javax.swing.JTable contact_info;
    private javax.swing.JTable diag;
    private javax.swing.JButton diagnose;
    private javax.swing.JTextField docid;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbl_back;
    private javax.swing.JLabel lbl_home;
    private javax.swing.JLabel lbl_logout;
    private javax.swing.JButton makeapp;
    private javax.swing.JButton makeappp;
    private javax.swing.JTable nurse_info;
    private javax.swing.JTable op_appointment;
    private javax.swing.JTable patient;
    private javax.swing.JTextField patientid;
    private javax.swing.JTable room_appointments;
    private javax.swing.JButton searchdoc;
    private javax.swing.JButton searchpatient;
    // End of variables declaration//GEN-END:variables
}
