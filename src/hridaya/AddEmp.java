/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hridaya;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vigne
 */
public class AddEmp extends javax.swing.JFrame {
    String username,time,date;

    /**
     * Creates new form AddEmp
     */
    public AddEmp() {
        initComponents();
    }

    AddEmp(String username, String date, String time) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        this.username=username;
        this.time=time;
        this.date=date;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        lbl_logout = new javax.swing.JLabel();
        lbl_back = new javax.swing.JLabel();
        lbl_home = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        deleteReceptionbtn8 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        deleteReceptionbtn4 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        deleteReceptionbtn2 = new javax.swing.JLabel();
        deleteReceptionbtn5 = new javax.swing.JLabel();
        pnl_add_doc = new javax.swing.JPanel();
        lbl_add_doc = new javax.swing.JLabel();
        lbl_add_docic = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        deleteReceptionbtn6 = new javax.swing.JLabel();
        deleteReceptionbtn7 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Doc_info = new javax.swing.JScrollPane();
        Doc_infot = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        nurse_info = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        front_desk_info = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        salary = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        insurance = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        contact_info = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        emer_contact = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        qualifications = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        consulting_time = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setSize(new java.awt.Dimension(0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 153, 51));

        jLabel10.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("ADMIN ");

        jLabel21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel21MouseClicked(evt);
            }
        });

        lbl_logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/power off.png"))); // NOI18N
        lbl_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_logoutMouseClicked(evt);
            }
        });

        lbl_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/back arrow.png"))); // NOI18N
        lbl_back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_backMouseClicked(evt);
            }
        });

        lbl_home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/home_1.png"))); // NOI18N
        lbl_home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_homeMouseClicked(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-refresh-52.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lbl_back, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 470, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(308, 308, 308)
                        .addComponent(jLabel21)
                        .addGap(292, 292, 292))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(277, 277, 277)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_home)
                        .addGap(62, 62, 62)
                        .addComponent(lbl_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_home)
                                    .addComponent(lbl_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel10.setBackground(new java.awt.Color(255, 153, 51));
        jPanel10.setPreferredSize(new java.awt.Dimension(150, 100));

        deleteReceptionbtn8.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        deleteReceptionbtn8.setForeground(new java.awt.Color(255, 255, 255));
        deleteReceptionbtn8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteReceptionbtn8.setText("Rehire For Workforce");
        deleteReceptionbtn8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteReceptionbtn8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteReceptionbtn8, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deleteReceptionbtn8, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        jPanel9.setBackground(new java.awt.Color(255, 153, 51));
        jPanel9.setPreferredSize(new java.awt.Dimension(150, 100));

        deleteReceptionbtn4.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        deleteReceptionbtn4.setForeground(new java.awt.Color(255, 255, 255));
        deleteReceptionbtn4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteReceptionbtn4.setText("Remove From Workforce");
        deleteReceptionbtn4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteReceptionbtn4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteReceptionbtn4, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deleteReceptionbtn4, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        jPanel12.setBackground(new java.awt.Color(255, 153, 51));
        jPanel12.setPreferredSize(new java.awt.Dimension(150, 100));
        jPanel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel12MouseClicked(evt);
            }
        });

        deleteReceptionbtn2.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        deleteReceptionbtn2.setForeground(new java.awt.Color(255, 255, 255));
        deleteReceptionbtn2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteReceptionbtn2.setText("Add Receptionist");
        deleteReceptionbtn2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteReceptionbtn2MouseClicked(evt);
            }
        });

        deleteReceptionbtn5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/receptionist_1.png"))); // NOI18N
        deleteReceptionbtn5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteReceptionbtn5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deleteReceptionbtn2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(167, Short.MAX_VALUE)
                .addComponent(deleteReceptionbtn5)
                .addGap(162, 162, 162))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteReceptionbtn5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteReceptionbtn2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnl_add_doc.setBackground(new java.awt.Color(255, 153, 51));
        pnl_add_doc.setPreferredSize(new java.awt.Dimension(150, 100));
        pnl_add_doc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnl_add_docMouseClicked(evt);
            }
        });

        lbl_add_doc.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        lbl_add_doc.setForeground(new java.awt.Color(255, 255, 255));
        lbl_add_doc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_add_doc.setText("Add Doctor");
        lbl_add_doc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_add_docMouseClicked(evt);
            }
        });

        lbl_add_docic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/doctor.png"))); // NOI18N
        lbl_add_docic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_add_docicMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnl_add_docLayout = new javax.swing.GroupLayout(pnl_add_doc);
        pnl_add_doc.setLayout(pnl_add_docLayout);
        pnl_add_docLayout.setHorizontalGroup(
            pnl_add_docLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl_add_doc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_add_docLayout.createSequentialGroup()
                .addContainerGap(167, Short.MAX_VALUE)
                .addComponent(lbl_add_docic)
                .addGap(162, 162, 162))
        );
        pnl_add_docLayout.setVerticalGroup(
            pnl_add_docLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_add_docLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(lbl_add_docic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_add_doc)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBackground(new java.awt.Color(255, 153, 51));
        jPanel13.setPreferredSize(new java.awt.Dimension(150, 100));
        jPanel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel13MouseClicked(evt);
            }
        });

        deleteReceptionbtn6.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        deleteReceptionbtn6.setForeground(new java.awt.Color(255, 255, 255));
        deleteReceptionbtn6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteReceptionbtn6.setText("Add Nurse");
        deleteReceptionbtn6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteReceptionbtn6MouseClicked(evt);
            }
        });

        deleteReceptionbtn7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/nurse.png"))); // NOI18N
        deleteReceptionbtn7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteReceptionbtn7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deleteReceptionbtn6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap(167, Short.MAX_VALUE)
                .addComponent(deleteReceptionbtn7)
                .addGap(162, 162, 162))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteReceptionbtn7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteReceptionbtn6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Doc_infot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "name", "Age", "Sex", "License number", "State medical Council", "Qualification Year", "Specialization", "Years of experience", "Blood group", "Consulting Price", "Insurance ID", "Employed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Doc_infot.setColumnSelectionAllowed(true);
        Doc_infot.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Doc_infot.getTableHeader().setReorderingAllowed(false);
        Doc_info.setViewportView(Doc_infot);
        Doc_infot.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jTabbedPane1.addTab("Doctor Info", Doc_info);

        nurse_info.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Age", "Sex", "Blood Group", "Working Hours", "Experience ", "Insurance ID", "Seniority", "Employed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(nurse_info);

        jTabbedPane1.addTab("Nurse Info", jScrollPane8);

        front_desk_info.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Age", "Sex", "Years Of Experience", "Blood Group", "Insurance ID", "Employed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(front_desk_info);

        jTabbedPane1.addTab("Front desk Info", jScrollPane9);

        salary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Cost to Comapny", "Provident fund %", "Gross salary", "Net Salary", "Income Tax", "PF Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(salary);

        jTabbedPane1.addTab("Salary", jScrollPane2);

        insurance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Insurance ID", "Company", "Amount", "Validity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(insurance);

        jTabbedPane1.addTab("Insurance", jScrollPane3);

        contact_info.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Ph no", "Email", "House number", "Street name", "City"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(contact_info);

        jTabbedPane1.addTab("Contact Info", jScrollPane4);

        emer_contact.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name of Contact", "Contact Number", "Relation", "Email", "Street Name", "City"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(emer_contact);

        jTabbedPane1.addTab("Emergency Contact", jScrollPane5);

        qualifications.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Bachelors", "Masters", "PhD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(qualifications);

        jTabbedPane1.addTab("Qualifications", jScrollPane6);

        consulting_time.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Doc ID", "Days of week", "Time", "Number of Hours"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(consulting_time);

        jTabbedPane1.addTab("Consulting time", jScrollPane7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 976, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnl_add_doc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnl_add_doc, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel21MouseClicked

    }//GEN-LAST:event_jLabel21MouseClicked

    private void deleteReceptionbtn4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteReceptionbtn4MouseClicked
      int index=jTabbedPane1.getSelectedIndex();
        //System.out.println("Index : "+index);
        if(index==0)
        {
            int rowindex=Doc_infot.getSelectedRow();
             if(rowindex>-1)
             {
                 String tempid=Doc_infot.getValueAt(rowindex,0).toString();
                //System.out.println("Rowindex"+rowindex);
                String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                     Statement st=con.createStatement();
                     String query = "UPDATE DOC_INFO SET EMPLOYED = '0' WHERE DOC_ID = '"+tempid+"'";
                     st.executeUpdate(query);
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID : " +tempid, "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
             }
             else
             {
                 JOptionPane.showMessageDialog(null, "No Index Selected in editable tables.", "Update Failed", 2);
             }
        }
        else if(index==1)
        {
             int rowindex=nurse_info.getSelectedRow();
             if(rowindex>-1)
             {
                 String tempid=Doc_infot.getValueAt(rowindex,0).toString();
                //System.out.println("Rowindex"+rowindex);
                String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                     Statement st=con.createStatement();
                     String query = "UPDATE DOC_INFO SET EMPLOYED = '0' WHERE DOC_ID = '"+tempid+"'";
                     st.executeUpdate(query);
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID : " +tempid, "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
             }
             else
             {
                 JOptionPane.showMessageDialog(null, "No Index Selected in editable tables.", "Update Failed", 2);
             }
        }
        else if(index==3)
        {
           int rowindex=front_desk_info.getSelectedRow();
             if(rowindex>-1)
             {
                 String tempid=Doc_infot.getValueAt(rowindex,0).toString();
                //System.out.println("Rowindex"+rowindex);
                String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                     Statement st=con.createStatement();
                     String query = "UPDATE DOC_INFO SET EMPLOYED = '0' WHERE DOC_ID = '"+tempid+"'";
                     st.executeUpdate(query);
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID : " +tempid, "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
             }
             else
             {
                 JOptionPane.showMessageDialog(null, "No Index Selected in editable tables.", "Update Failed", 2);
             }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Index Selected in editable tables.", "Update Failed", 2);
        }
        updateTables();
    }//GEN-LAST:event_deleteReceptionbtn4MouseClicked

    private void lbl_add_docMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_add_docMouseClicked
        new SignupDoc(username,date,time).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lbl_add_docMouseClicked

    private void lbl_add_docicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_add_docicMouseClicked
       new SignupDoc(username,date,time).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lbl_add_docicMouseClicked

    private void deleteReceptionbtn2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteReceptionbtn2MouseClicked
      new SignupFrontDesk(username,date,time).setVisible(true);
       this.dispose();
    }//GEN-LAST:event_deleteReceptionbtn2MouseClicked

    private void deleteReceptionbtn5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteReceptionbtn5MouseClicked
       new SignupFrontDesk(username,date,time).setVisible(true);
       this.dispose();
    }//GEN-LAST:event_deleteReceptionbtn5MouseClicked

    private void deleteReceptionbtn6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteReceptionbtn6MouseClicked
       new SignupNurse(username,date,time).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_deleteReceptionbtn6MouseClicked

    private void deleteReceptionbtn7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteReceptionbtn7MouseClicked
        new SignupNurse(username,date,time).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_deleteReceptionbtn7MouseClicked

    private void lbl_homeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_homeMouseClicked
        new Admin(username,date,time).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lbl_homeMouseClicked

    private void lbl_logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_logoutMouseClicked
        String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
        Connection con = null;
       
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con=DriverManager.getConnection(connectString,"root","");
             Statement st=con.createStatement();
           String qr="update login SET logged = '0' WHERE username = '"+username+"'";
               st.executeUpdate(qr);
               SimpleDateFormat dateformat1 = new SimpleDateFormat("HH:mm:ss");
                String timeout=dateformat1.format(Calendar.getInstance().getTime());
               String qt="update log_times SET logout_time = '"+timeout+"' WHERE id = '"+username+ "' AND date_login = '"+date+"' and login_time = '"+time+"'";
               st.executeUpdate(qt);
               con.close();
               
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            new Login().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_lbl_logoutMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
      
    }//GEN-LAST:event_formWindowClosed

    private void lbl_backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_backMouseClicked
        new Admin(username,date,time).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lbl_backMouseClicked

    private void pnl_add_docMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_add_docMouseClicked
        new SignupDoc(username,date,time).setVisible(true);
        this.dispose();     
    }//GEN-LAST:event_pnl_add_docMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
     updateTables();  
    }//GEN-LAST:event_formWindowOpened
public void updateTables()
{
     DefaultTableModel model = (DefaultTableModel)
        Doc_infot.getModel();
        //ta = "Seller";
        int rows = model.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model.removeRow(0);
            }
        }
         DefaultTableModel model1 = (DefaultTableModel)
        nurse_info.getModel();
        //ta = "Seller";
        rows = model1.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model1.removeRow(0);
            }
        }
         DefaultTableModel model2= (DefaultTableModel)
        front_desk_info.getModel();
        //ta = "Seller";
        rows = model2.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model2.removeRow(0);
            }
        }
         DefaultTableModel model3 = (DefaultTableModel)
        salary.getModel();
        //ta = "Seller";
        rows = model3.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model3.removeRow(0);
            }
        }
         DefaultTableModel model4 = (DefaultTableModel)
        insurance.getModel();
        //ta = "Seller";
        rows = model4.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model4.removeRow(0);
            }
        }
         DefaultTableModel model5 = (DefaultTableModel)
        contact_info.getModel();
        //ta = "Seller";
        rows = model5.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model5.removeRow(0);
            }
        }
         DefaultTableModel model6 = (DefaultTableModel)
        emer_contact.getModel();
        //ta = "Seller";
        rows = model6.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model6.removeRow(0);
            }
        }
         DefaultTableModel model7 = (DefaultTableModel)
        qualifications.getModel();
        //ta = "Seller";
        rows = model7.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model7.removeRow(0);
            }
        }
         DefaultTableModel model8 = (DefaultTableModel)
        consulting_time.getModel();
        //ta = "Seller";
        rows = model8.getRowCount();
        if(rows>0)
        {
            for(int i=0;i<rows;i++)
            {
                model8.removeRow(0);
            }
        }
        String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
        Connection con = null;
       
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con=DriverManager.getConnection(connectString,"root","");
             Statement st=con.createStatement();
              String qr="SELECT * FROM DOC_INFO";
               ResultSet rs = st.executeQuery( qr );
                while(rs.next())
                {
                    String a = rs.getString("doc_id");
                    String b = rs.getString("name");
                    String c = rs.getString("age");
                    String d=rs.getString("sex");
                    String e = rs.getString("lic_no");
                    String f = rs.getString("state_medical_council");
                    String g = rs.getString("qualification_year");
                    String h=rs.getString("specialization");
                    String i = rs.getString("years_of_experience");
                    String j = rs.getString("blood_group");
                    String k = rs.getString("consulting_price");
                    String l=rs.getString("insurance_id");
                    String m=rs.getString("employed");
                    model.addRow(new Object[]{ a, b, c, d, e, f, g, h, i, j, k, l, m});
                }
                String q1="SELECT * FROM NURSE_INFO";
                rs=st.executeQuery(q1);
                while(rs.next())
                {
                    String a = rs.getString("nurse_id");
                    String b = rs.getString("name");
                    String c = rs.getString("age");
                    String d=rs.getString("sex");
                    String e = rs.getString("blood_group");
                    String f = rs.getString("working_hours");
                    String g = rs.getString("experience");
                    String h=rs.getString("insurance_id");
                    String i = rs.getString("seniority");
                    String j=rs.getString("employed");
                    model1.addRow(new Object[]{ a, b, c, d, e, f, g, h, i, j});
                }
                String q2="SELECT * FROM FRONT_DESK_INFO";
                rs=st.executeQuery(q2);
                while(rs.next())
                {
                    String a = rs.getString("f_id");
                    String b = rs.getString("name");
                    String c = rs.getString("age");
                    String d=rs.getString("sex");
                    String e = rs.getString("years_of_experience");
                    String f = rs.getString("blood_group");
                    String g = rs.getString("insurance_id");
                    String h=rs.getString("employed");
                    model2.addRow(new Object[]{ a, b, c, d, e, f, g, h});
                }
                String q3="SELECT * FROM SALARY_INFO";
                rs=st.executeQuery(q3);
                while(rs.next())
                {
                    String a = rs.getString("id");
                    String b = rs.getString("ctc");
                    String c = rs.getString("pf");
                    String d=rs.getString("gross_salary");
                    String e = rs.getString("net_salary");
                    String f = rs.getString("tax_income");
                    String g = rs.getString("pf_amount");
                    model3.addRow(new Object[]{ a, b, c, d, e, f, g});
                }
                String q4="SELECT * FROM INSURANCE_INFO";
                rs=st.executeQuery(q4);
                while(rs.next())
                {
                    String a = rs.getString("insurance_id");
                    String b = rs.getString("company");
                    String c = rs.getString("amount");
                    String d=rs.getString("validity");
                    model4.addRow(new Object[]{ a, b, c,d});
                }
                String q5="SELECT * FROM CONTACT_INFO";
                rs=st.executeQuery(q5);
                while(rs.next())
                {
                    String a = rs.getString("id");
                    String b = rs.getString("ph_no1");
                    String c = rs.getString("email");
                    String d=rs.getString("house_no");
                    String e = rs.getString("street_name");
                    String f = rs.getString("city");
                    model5.addRow(new Object[]{ a, b, c, d, e, f});
                }
                String q6="SELECT * FROM EMERGENCY_CONTACT";
                rs=st.executeQuery(q6);
                while(rs.next())
                {
                    String a = rs.getString("id");
                    String b = rs.getString("name_of_contact");
                    String c = rs.getString("contact_number");
                    String d=rs.getString("relation");
                    String e = rs.getString("email");
                    String f = rs.getString("street_name");
                    String g = rs.getString("city");
                    model6.addRow(new Object[]{ a, b, c, d, e, f, g});
                }
                String q7="SELECT * FROM QUALIFICATION";
                rs=st.executeQuery(q7);
                while(rs.next())
                {
                    String a = rs.getString("id");
                    String b = rs.getString("bachelors_degree");
                    String c = rs.getString("masters_degree1");
                    String d=rs.getString("phd");
                    model7.addRow(new Object[]{ a, b, c, d});
                }
                String q8="SELECT * FROM CONSULTING_TIME";
                rs=st.executeQuery(q8);
                while(rs.next())
                {
                    String a = rs.getString("doc_id");
                    int dow=rs.getInt("days_of_week");
                    String b="";
                    while(dow>0)
                    {
                        int k=dow%10;
                        if(k==1)
                        {
                            b=b+" Monday";
                        }
                        else if(k==2)
                        {
                            b=b+" Tuesday";
                        }
                        else if(k==3)
                        {
                            b=b+" Wednesday";
                        }
                        else if(k==4)
                        {
                            b=b+" Thursday";
                        }
                        else if(k==5)
                        {
                            b=b+" Friday";
                        }
                        else if(k==6)
                        {
                            b=b+" Saturday";
                        }
                        else
                        {
                            b=b+" Sunday";
                        }
                        dow=dow/10;
                    }
                    
                    String c = rs.getString("time");
                    String d=rs.getString("no_of_hours");
                   
                    model8.addRow(new Object[]{ a, b, c, d});
                }
                con.close();
                
                
               
        }
        catch(Exception e)
        {
            System.out.println( e );
        }
}
    private void deleteReceptionbtn8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteReceptionbtn8MouseClicked
        
        
        
       int index=jTabbedPane1.getSelectedIndex();
        //System.out.println("Index : "+index);
        if(index==0)
        {
            int rowindex=Doc_infot.getSelectedRow();
             if(rowindex>-1)
             {
                 String tempid=Doc_infot.getValueAt(rowindex,0).toString();
                //System.out.println("Rowindex"+rowindex);
                String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                     Statement st=con.createStatement();
                     String query = "UPDATE DOC_INFO SET EMPLOYED = '1' WHERE DOC_ID = '"+tempid+"'";
                     st.executeUpdate(query);
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID : " +tempid, "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
             }
             else
             {
                 JOptionPane.showMessageDialog(null, "No Index Selected in editable tables.", "Update Failed", 2);
             }
        }
        else if(index==1)
        {
             int rowindex=nurse_info.getSelectedRow();
             if(rowindex>-1)
             {
                 String tempid=Doc_infot.getValueAt(rowindex,0).toString();
                //System.out.println("Rowindex"+rowindex);
                String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                     Statement st=con.createStatement();
                     String query = "UPDATE DOC_INFO SET EMPLOYED = '1' WHERE DOC_ID = '"+tempid+"'";
                     st.executeUpdate(query);
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID : " +tempid, "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
             }
             else
             {
                 JOptionPane.showMessageDialog(null, "No Index Selected in editable tables.", "Update Failed", 2);
             }
        }
        else if(index==3)
        {
           int rowindex=front_desk_info.getSelectedRow();
             if(rowindex>-1)
             {
                 String tempid=Doc_infot.getValueAt(rowindex,0).toString();
                //System.out.println("Rowindex"+rowindex);
                String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                     Statement st=con.createStatement();
                     String query = "UPDATE DOC_INFO SET EMPLOYED = '1' WHERE DOC_ID = '"+tempid+"'";
                     st.executeUpdate(query);
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID : " +tempid, "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
             }
             else
             {
                 JOptionPane.showMessageDialog(null, "No Index Selected in editable tables.", "Update Failed", 2);
             }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Index Selected in editable tables.", "Update Failed", 2);
        }
       updateTables();
     
    }//GEN-LAST:event_deleteReceptionbtn8MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
       int index= jTabbedPane1.getSelectedIndex();
   
      if(index==0)
       {
           int row;
           int rows = Doc_infot.getRowCount();
           int i;
           //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                    for(row=0;row<rows;row++)
                    {
                   String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' ,NAME='"+Doc_infot.getValueAt(row,1).toString()+"', AGE='"+Doc_infot.getValueAt(row,2).toString()+"',SEX='"+Doc_infot.getValueAt(row,3).toString()+"', LIC_NO='"+Doc_infot.getValueAt(row,4).toString()+"', STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,5).toString()+"', QUALIFICATION_YEAR='"+Doc_infot.getValueAt(row,6).toString()+"', SPECIALIZATION='"+Doc_infot.getValueAt(row,7).toString()+"', YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,8).toString()+"', BLOOD_GROUP='"+Doc_infot.getValueAt(row,9).toString()+"',CONSULTING_PRICE='"+Doc_infot.getValueAt(row,10).toString()+"', INSURANCE_ID='"+Doc_infot.getValueAt(row,11).toString()+"', EMPLOYED= '"+Doc_infot.getValueAt(row,12).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
                     Statement st=con.createStatement();
                        st.executeUpdate(query);
                    }
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID's DOC" , "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
       }
        else if(index==1)
       {
           int row;
           int rows = nurse_info.getRowCount();
           int i;
           //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                    for(row=0;row<rows;row++)
                    {
                   String query="UPDATE NURSE_INFO SET NURSE_ID='"+nurse_info.getValueAt(row,0).toString()+"' ,NAME='"+nurse_info.getValueAt(row,1).toString()+"', AGE='"+nurse_info.getValueAt(row,2).toString()+"',SEX='"+nurse_info.getValueAt(row,3).toString()+"', BLOOD_GROUP='"+nurse_info.getValueAt(row,4).toString()+"', WORKING_HOURS='"+nurse_info.getValueAt(row,5).toString()+"', EXPERIENCE='"+nurse_info.getValueAt(row,6).toString()+"',   INSURANCE_ID='"+nurse_info.getValueAt(row,7).toString()+"', SENIORITY='"+nurse_info.getValueAt(row,8).toString()+"', EMPLOYED='"+nurse_info.getValueAt(row,9).toString()+"' WHERE NURSE_ID='"+  nurse_info.getValueAt(row,0).toString()+"'" ;
                     Statement st=con.createStatement();
                        st.executeUpdate(query);
                    }
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID's NURSE" , "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
       }
        else if(index==2)
       {
           int row;
           int rows = front_desk_info.getRowCount();
           int i;
           //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                    for(row=0;row<rows;row++)
                    {
                   String query="UPDATE FRONT_DESK_INFO SET F_ID='"+front_desk_info.getValueAt(row,0).toString()+"' ,NAME='"+front_desk_info.getValueAt(row,1).toString()+"', AGE='"+front_desk_info.getValueAt(row,2).toString()+"',SEX='"+front_desk_info.getValueAt(row,3).toString()+"',YEARS_OF_EXPERIENCE='"+front_desk_info.getValueAt(row,4).toString()+"', BLOOD_GROUP='"+front_desk_info.getValueAt(row,5).toString()+"', INSURANCE_ID='"+front_desk_info.getValueAt(row,6).toString()+"', EMPLOYED='"+front_desk_info.getValueAt(row,7).toString()+"' WHERE F_ID='"+  front_desk_info.getValueAt(row,0).toString()+"'" ;
                     Statement st=con.createStatement();
                        st.executeUpdate(query);
                    }
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID's FD" , "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
       }
         else if(index==3)
       {
           int row;
           int  rows = salary.getRowCount();
        
           int ctc,net,gross,tax1,pf1;
           double pfp,pf,tax;
           //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                    for(row=0;row<rows;row++)
                    {
                           ctc=Integer.parseInt(salary.getValueAt(row,1).toString());
                           pfp=Double.parseDouble(salary.getValueAt(row,2).toString());
                          pf=(int)ctc*(pfp/100f);
         pf1=(int)pf;
         gross=(int)(ctc-pf);
         tax=0;
        if(ctc>1200000)
        {
            tax=(int)((30f/100f)*ctc);
        }
        else
        {
            tax=(int)((15f/100f)*ctc);
        }
        tax1=(int)tax;
        net=gross-tax1;
                   String query="UPDATE SALARY_INFO SET ID='"+salary.getValueAt(row,0).toString()+"' ,CTC='"+salary.getValueAt(row,1).toString()+"', PF='"+salary.getValueAt(row,2).toString()+"',GROSS_SALARY='"+gross+"',NET_SALARY='"+net+"',TAX_INCOME='"+tax1+"', PF_AMOUNT='"+pf1+"' WHERE ID='"+  salary.getValueAt(row,0).toString()+"'" ;
                     Statement st=con.createStatement();
                        st.executeUpdate(query);
                    }
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID's SALARY" , "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
       }
        else if(index==4)
       {
           int row;
           int rows = insurance.getRowCount();
           int i;
           //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                    for(row=0;row<rows;row++)
                    {
                   String query="UPDATE INSURANCE_INFO  SET INSURANCE_ID='"+insurance.getValueAt(row,0).toString()+"' ,COMPANY='"+insurance.getValueAt(row,1).toString()+"', AMOUNT='"+insurance.getValueAt(row,2).toString()+"',VALIDITY='"+insurance.getValueAt(row,3).toString()+"' WHERE INSURANCE_ID='"+  insurance.getValueAt(row,0).toString()+"'" ;
                     Statement st=con.createStatement();
                        st.executeUpdate(query);
                    }
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID's INSURANCE" , "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
       }
          else if(index==5)
       {
           int row;
           int rows = contact_info.getRowCount();
           int i;
           //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                    for(row=0;row<rows;row++)
                    {
                   String query="UPDATE CONTACT_INFO  SET ID='"+contact_info.getValueAt(row,0).toString()+"' ,PH_NO1='"+contact_info.getValueAt(row,1).toString()+"', PH_NO2='NULL',EMAIL='"+contact_info.getValueAt(row,2).toString()+"', HOUSE_NO='"+contact_info.getValueAt(row,3).toString()+"',STREET_NAME='"+contact_info.getValueAt(row,4).toString()+"',CITY='"+contact_info.getValueAt(row,5).toString()+"' WHERE ID='"+  contact_info.getValueAt(row,0).toString()+"'" ;
                     Statement st=con.createStatement();
                        st.executeUpdate(query);
                    }
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID's CONTACTS" , "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
       }
           else if(index==6)
       {
           int row;
           int rows = emer_contact.getRowCount();
           int i;
           //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                    for(row=0;row<rows;row++)
                    {
                   String query="UPDATE EMERGENCY_CONTACT  SET ID='"+emer_contact.getValueAt(row,0).toString()+"' ,NAME_OF_CONTACT='"+emer_contact.getValueAt(row,1).toString()+"', CONTACT_NUMBER='"+emer_contact.getValueAt(row,2).toString()+"',RELATION='"+emer_contact.getValueAt(row,3).toString()+"', EMAIL='"+emer_contact.getValueAt(row,4).toString()+"',STREET_NAME='"+emer_contact.getValueAt(row,5).toString()+"',CITY='"+emer_contact.getValueAt(row,6).toString()+"' WHERE ID='"+  emer_contact.getValueAt(row,0).toString()+"'" ;
                     Statement st=con.createStatement();
                        st.executeUpdate(query);
                    }
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID's EMERGENCY CONTACT" , "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
       }
            else if(index==7)
       {
           int row;
           int rows = qualifications.getRowCount();
           int i;
           //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                    for(row=0;row<rows;row++)
                    {
                   String query="UPDATE QUALIFICATION  SET ID='"+qualifications.getValueAt(row,0).toString()+"' ,BACHELORS_DEGREE='"+qualifications.getValueAt(row,1).toString()+"', MASTERS_DEGREE1='"+qualifications.getValueAt(row,2).toString()+"',MASTERS_DEGREE2='NULL', PHD='"+qualifications.getValueAt(row,3).toString()+"' WHERE ID='"+  qualifications.getValueAt(row,0).toString()+"'" ;
                     Statement st=con.createStatement();
                        st.executeUpdate(query);
                    }
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID's QUALIFICATIONS" , "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
       }
            else if(index==8)
       {
           int row;
           int rows = consulting_time.getRowCount();
           int i;
           //String query="UPDATE DOC_INFO SET DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"' NAME='"+Doc_infot.getValueAt(row,1).toString()+"'AGE='"+Doc_infot.getValueAt(row,2).toString()+"'SEX='"+"' LIC_NO='"+Doc_infot.getValueAt(row,3).toString()+"' STATE_MEDICAL_COUNCIL='"+Doc_infot.getValueAt(row,4).toString()+"' QUALIFICATION YEAR='"+Doc_infot.getValueAt(row,5).toString()+"' SPECIALIZATION='"+Doc_infot.getValueAt(row,6).toString()+"' YEARS_OF_EXPERIENCE='"+Doc_infot.getValueAt(row,7).toString()+"' BLOOD_GROUP='"+Doc_infot.getValueAt(row,8).toString()+"CONSULTING_PRICE='"+Doc_infot.getValueAt(row,9).toString()+"' INSURANCE_ID='"+Doc_infot.getValueAt(row,10).toString()+"' EMPLOYED= '"+Doc_infot.getValueAt(row,11).toString()+"' WHERE DOC_ID='"+Doc_infot.getValueAt(row,0).toString()+"'" ;
            String connectString="jdbc:mysql://localhost:3307/hospitalms?zeroDateTimeBehavior=convertToNull";
                Connection con = null;

                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    con=DriverManager.getConnection(connectString,"root","");
                    for(row=0;row<rows;row++)
                    {
                   String query="UPDATE CONSULTING_TIME  SET DOC_ID='"+consulting_time.getValueAt(row,0).toString()+"' , TIME='"+consulting_time.getValueAt(row,2).toString()+"',NO_OF_HOURS='"+consulting_time.getValueAt(row,3).toString()+"' WHERE DOC_ID='"+  consulting_time.getValueAt(row,0).toString()+"'" ;
                     Statement st=con.createStatement();
                        st.executeUpdate(query);
                    }
                     con.close();
                      JOptionPane.showMessageDialog(null, "Successfully Updated ID's CONSULTING TIME" , "Update", 2);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
       }
       else
            {
                JOptionPane.showMessageDialog(null, "Error" , "Update failed", 2);
            }
       updateTables();
       
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jPanel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel13MouseClicked
        new SignupNurse(username,date,time).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jPanel13MouseClicked

    private void jPanel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel12MouseClicked
       new SignupFrontDesk(username,date,time).setVisible(true);
       this.dispose();
    }//GEN-LAST:event_jPanel12MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddEmp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane Doc_info;
    private javax.swing.JTable Doc_infot;
    private javax.swing.JTable consulting_time;
    private javax.swing.JTable contact_info;
    private javax.swing.JLabel deleteReceptionbtn2;
    private javax.swing.JLabel deleteReceptionbtn4;
    private javax.swing.JLabel deleteReceptionbtn5;
    private javax.swing.JLabel deleteReceptionbtn6;
    private javax.swing.JLabel deleteReceptionbtn7;
    private javax.swing.JLabel deleteReceptionbtn8;
    private javax.swing.JTable emer_contact;
    private javax.swing.JTable front_desk_info;
    private javax.swing.JTable insurance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbl_add_doc;
    private javax.swing.JLabel lbl_add_docic;
    private javax.swing.JLabel lbl_back;
    private javax.swing.JLabel lbl_home;
    private javax.swing.JLabel lbl_logout;
    private javax.swing.JTable nurse_info;
    private javax.swing.JPanel pnl_add_doc;
    private javax.swing.JTable qualifications;
    private javax.swing.JTable salary;
    // End of variables declaration//GEN-END:variables
}
